General:
- Try opening new BrowserWindow to "pop out" plot containers of main window

- Add .db file to track who is using the wetbar and how many
  times they've used it.

- Display version somewhere in main window and try to add to folder
  created when packaging app

- Prevent switching routes if code is running

Docs:

- Update docs

Plots:

- Confirm loading spinner stops if error occurs when reading files

- Redo how plot containers are rendered. Do something similar to how
  Series is rendered.

- Make paper color the background color for the div so that there's
  no white space where the collapse button is

- Add color picker for line colors

- Limit the number of items that show in the X and Y parameter
  select components with scroll

- Right now, if new data is loaded, any existing plots will not be able to access
  it. Instead of getting whatever data is loaded when a new plot is added to the page,
  add a dependency to the useEffect() to detect when new data is loaded, so all existing
  plots will have access to the data.

- Add option to normalize plots to plot container

- Add options for secondary (and more) x and y axis (include checkbox to
  enable or disable secondary axes)

- Add options for vertical and horizontal lines, shapes, annotations, etc

SpaceUtilization:

- Figure out why Plot component keeps rendering while code is running.
  Some of the functions, like update(), log to console. Could be
  because of the sockets updating the text. Probably need to use
  useMemo or something to avoid the plot rendering when the sockets
  update the text.

- If treemap fails, use row grouping in a table to display folders
  searched, and everything under it.

- Consider adding checkbox to table that allow the user to
  delete extensions after code has run so they don't have to
  go to File Cleanup, find the files again, then delete them.
  This would remove one extra step.

- Add loading spinner to plot that appears after data has been loaded
  to indicate the plot is rendering

- Add folder name to hover text on plotly plot

- Incorporate multiprocessing on child folders

Cleanup:

- Incorporate multiprocessing if more than one folder exists

- Add option for deleting empty folders

Backend:

- Add list option to view contents of tar file

- Add sockets to emit progress (use flask-socketio package)

- Test all parts of code that use winapi_path to make sure it works